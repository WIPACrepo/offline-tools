#!/usr/bin/env python

import os, sys
import subprocess as sub
import time
import datetime
import glob
import json
import subprocess as sub

sys.path.append("/data/user/i3filter/SQLServers_n_Clients/")
sys.path.append('/data/user/i3filter/IC86_OfflineProcessing/OfflineProductionTools')

import SendNotification as SN


from RunTools import *
from FileTools import *
from DbTools import *

try:
    import SQLClient_dbs4 as dbs4
    dbs4_ = dbs4.MySQL()

except Exception, err:
    raise Exception("Error: %s "%str(err))


def parseLogs(logFile):
    lFile = open(logFile,"r")

    lines = lFile.readlines()

    aDOMS = [l.split(" ")[0] for l in lines if "OMKey" in l]
    notIceTop = []
    for ad in aDOMS:
        if ad.split(",")[1] not in ('61','62','63','64'): notIceTop.append(ad)
    
    print "None IceTop DOMs with changes are: \n",notIceTop


    rLines = [l for l in lines if "OMKey" in l]

    changedVariables = []
    for rl in rLines:
        try:
            cValues = []
            cValues = rl.split("[")[1].split("]")[0].translate(None,""" ' """).split(",")
        except:
            pass
    
    changedVariables.extend(cValues)
    changedVariables = list(set(changedVariables))
    changedVariables.sort()
    print "Union of all changed values: \n",changedVariables
    
    return " , ".join(notIceTop),",".join(changedVariables)


    


def main_cmp(fileDict,sRuns):
    
    for sRun in sRuns:
        if sRun <= 126378: continue # first template
        
        #if sRun != 126380: continue
        #if sRun not in [124799,124859,124891,125057,125171]: continue
        #if sRun !=126007: continue
        
        if fileDict[sRun][1] is not None: continue

        currentFile = fileDict[sRun][0]
        templateFile = fileDict[sRuns[sRuns.index(sRun)-1]][0]
    
        print 'current File: ',currentFile
        print 'template File: ',templateFile
    
        sub.check_call(["cp",currentFile,"."])
        sub.check_call(["cp",templateFile,"."])
                
                
        outLog = "/data/user/i3filter/IC86_OfflineProcessing/OfflineSubmitScripts_2015/TemplateGCDChecks/logs/Run%s.logs"%sRun
                
        with open (outLog,"w") as oL:
            
            print "Attempting to compare %s to template: %s\n"%(currentFile,templateFile)
            
            try:
                RV = sub.call(["/data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_IC2015-L2_V15-04-02/./env-shell.sh",
                                "python", "/data/user/i3filter/IC86_OfflineProcessing/OfflineProductionTools/CmpGCDFiles.py",
                                        "-f", "%s %s"%(currentFile,templateFile),"-v","-t"],stdout=oL, stderr=oL)
                        
                dbs4_.execute("""update i3filter.grl_snapshot_info g
                                set TemplateGCDCheck=%s where run_id=%s"""%(RV,sRun))
                
                if RV:
                    
                    [notIceTop,changedVariables] = parseLogs(outLog)
                    
                    message = ""
                    sender = 'ofadiran'
                    receivers = ['drwilliams3@ua.edu','john.kelley@icecube.wisc.edu','matt.kauer@icecube.wisc.edu','tomas.j.palczewski@ua.edu','david.schultz@icecube.wisc.edu','david.delventhal@icecube.wisc.edu','achim.stoessl@icecube.wisc.edu','jan.oertlin@icecube.wisc.edu']
                    #receivers = ['ofadiran@icecube.wisc.edu']
                    
                    domain = '@icecube.wisc.edu'
                    subject = " Template change for Run%s"%sRun
                    messageBody = ""
    
                    # only necessary for html emails
                    mimeVersion="1.0"
                    contentType="text/html"
    
                    messageBody += """
                                *** This is an automated message generated by the *** <br>
                                ***        GCD Template Checking System   *** <br><br>
                  
                                The Template Check for<br>
                                Run:<b>%s</b><br>
                                returned a non-zero value: <b>%s</b> <br>
                                The files compared are: <br><br>
                                currentFile: %s <br>
                                templateFile: %s <br><br>
                                <b>Non-IceTop DOMs affected</b>: [%s] <br><br>
                                <b>Union of affected values</b>: [%s]
                                """%(sRun,RV,currentFile,templateFile,notIceTop,changedVariables)
    
                    message = SN.CreateMsg(domain, sender, receivers, subject,messageBody,mimeVersion,contentType)
    
                    if len(message):
                        SN.SendMsg(sender,receivers,message)
    
                
            except Exception, err:
                oL.write("\ncompare error for run %s"%sRun)
                oL.write(str(err))
    
                
        #clean up 
        os.system("rm *%s*"%sRun)
        os.system("rm *%s*"%sRuns[sRuns.index(sRun)-1])
                
        #break
    
            
    #


if __name__ == '__main__':
    
    
    print "Attempting TemplateGCDChecks @ %s"%datetime.datetime.now().isoformat().replace("T"," ")
    
    
    if os.path.isfile("/data/user/i3filter/IC86_OfflineProcessing/OfflineSubmitScripts_2015/TemplateGCDChecks/TemplateGCDCheck_SubmitLock.txt"):
        f = open("/data/user/i3filter/IC86_OfflineProcessing/OfflineSubmitScripts_2015/TemplateGCDChecks/TemplateGCDCheck_SubmitLock.txt",'r')
        pid = f.readline() # PID of the previous process
        # Check if a process with this pid is still running, just printing the command w/o the ps header (so, no line if no process with PID is running)
        sub_proc = sub.Popen(['ps', '-p', str(pid), '-o', 'command='], shell=False, stdout=sub.PIPE)
        for line in sub_proc.stdout:
            # Check if the running process is still a TemplateGCDCheck (is required since the PIDs are recycled)
            if 'TemplateGCDChecks.py' in line:
                print "Another instance of the TemplateGCDCheck script is running @ %s ... exiting"%datetime.datetime.now().isoformat().replace("T"," ")
                exit(0)

        print "removing stale lock file"
        os.system("rm -f /data/user/i3filter/IC86_OfflineProcessing/OfflineSubmitScripts_2015/TemplateGCDChecks/TemplateGCDCheck_SubmitLock.txt")

    with open("/data/user/i3filter/IC86_OfflineProcessing/OfflineSubmitScripts_2015/TemplateGCDChecks/TemplateGCDCheck_SubmitLock.txt",'w') as f:
        f.write(str(os.getpid()))
    

    # default run number to start checks, this can be over-written by supplying an
    StartRun = 126378
    try:
        StartRun = int(sys.argv[1])
    except:
        pass
    
    
    
    notChecked = dbs4_.fetchall(""" SELECT * FROM i3filter.grl_snapshot_info g where (GCDCheck and BadDOMsCheck)
                               and run_id>=%s order by run_id"""%StartRun,UseDict=True)


    fileDict = {}
    for n in notChecked:
    #if n['TemplateGCDCheck'] is not None: continue

        currentFile = glob.glob("/data/exp/IceCube/%s/filtered/level2/AllGCD/*%s*"%(n['good_tstart'].year,n['run_id']))
    
        if len(currentFile):
            if os.path.isfile(currentFile[0]):
                fileDict[n['run_id']] = [currentFile[0],n['TemplateGCDCheck']]
        #else:
        #    fileDict[n['run_id']] = ""
    
    if not len(fileDict):
        print "No GCD file meet criteria for Template testing .... exiting"
        exit(0)
        
    sRuns = fileDict.keys()
    sRuns.sort()

    print sRuns

    main_cmp(fileDict,sRuns)
    
    
    
    if os.path.isfile("/data/user/i3filter/IC86_OfflineProcessing/OfflineSubmitScripts_2015/TemplateGCDChecks/TemplateGCDCheck_SubmitLock.txt"):
        print "removing TemplateGCDCheck chksum submission lock file"
        os.system("rm -f /data/user/i3filter/IC86_OfflineProcessing/OfflineSubmitScripts_2015/TemplateGCDChecks/TemplateGCDCheck_SubmitLock.txt")
