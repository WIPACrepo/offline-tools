#!/usr/bin/env python

import os, sys
import subprocess as sub
import time
import datetime
import glob
import json
import subprocess as sub
from libs.logger import get_logger
from libs.argparser import get_defaultparser
from libs.files import get_logdir, get_rootdir
import libs.process

sys.path.append("/data/user/i3filter/SQLServers_n_Clients/")
sys.path.append('/data/user/i3filter/IC86_OfflineProcessing/OfflineProductionTools')

import SendNotification as SN


from RunTools import *
from FileTools import *
from DbTools import *

try:
    import SQLClient_dbs4 as dbs4
    dbs4_ = dbs4.MySQL()

except Exception, err:
    raise Exception("Error: %s "%str(err))

#FIXME: adjust paths for season
DEFAULT_START_RUN = 126378
ENVSHELL = "/data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_IC2015-L2_V15-04-05/./env-shell.sh"
OFFLINEPRODUCTIONTOOLS = "/data/user/i3filter/IC86_OfflineProcessing/OfflineProductionTools/"

CMPGCD = "CmpGCDFiles.py"

SENDER = "jan.oertlin"
RECEIVERS = ['drwilliams3@ua.edu',
             'john.kelley@icecube.wisc.edu',
             'matt.kauer@icecube.wisc.edu',
             'tomas.j.palczewski@ua.edu',
             'david.schultz@icecube.wisc.edu',
             'david.delventhal@icecube.wisc.edu',
             'achim.stoessl@icecube.wisc.edu',
             'jan.oertlin@icecube.wisc.edu']
DOMAIN = '@icecube.wisc.edu'

LOGFILEPATH = get_logdir(sublogpath = "TemplateGCDChecks")
LOGFILE = os.path.join(LOGFILEPATH, "TemplateGCDChecks_")

def parse_logs(logFile, logger):
    lFile = open(logFile,"r")

    lines = lFile.readlines()

    aDOMS = [l.split(" ")[0] for l in lines if "OMKey" in l]
    notIceTop = []
    for ad in aDOMS:
        if ad.split(",")[1] not in ('61','62','63','64'): notIceTop.append(ad)
    
    logger.info("None IceTop DOMs with changes are: %s"%notIceTop)

    rLines = [l for l in lines if "OMKey" in l]

    changedVariables = []
    for rl in rLines:
        try:
            cValues = []
            cValues = rl.split("[")[1].split("]")[0].translate(None,""" ' """).split(",")
        except:
            pass
    
    changedVariables.extend(cValues)
    changedVariables = list(set(changedVariables))
    changedVariables.sort()
    logger.info("Union of all changed values: %s"%changedVariables)
    
    return " , ".join(notIceTop),",".join(changedVariables)

def main_cmp(fileDict, sRuns, dryrun):
    for sRun in sRuns:
        if sRun <= 126378: continue # first template
        
        #if sRun != 126380: continue
        #if sRun not in [124799,124859,124891,125057,125171]: continue
        #if sRun !=126007: continue
        
        if fileDict[sRun][1] is not None:
            logger.info("Run %s is already checked"%sRun)
            continue

        currentFile = fileDict[sRun][0]
        templateFile = fileDict[sRuns[sRuns.index(sRun)-1]][0]
    
        logger.info("current File: %s"%currentFile)
        logger.info("template File: %s "%templateFile)
    
        sub.check_call(["cp",currentFile,"."])
        sub.check_call(["cp",templateFile,"."])
                
        outLog = os.path.join(LOGFILEPATH, "Run%s.logs"%sRun)
        logger.debug("Log file for run %s: %s"%(sRun, outLog))
        
        with open (outLog,"w") as oL:
            logger.info("Attempting to compare %s to template: %s"%(currentFile,templateFile))
            
            try:
                RV = sub.call([ENVSHELL, "python", os.path.join(OFFLINEPRODUCTIONTOOLS, CMPGCD),
                                        "-f", "%s %s"%(currentFile,templateFile),"-v","-t"],stdout=oL, stderr=oL)
                
                if not dryrun:
                    dbs4_.execute("""update i3filter.grl_snapshot_info g
                                    set TemplateGCDCheck=%s where run_id=%s"""%(RV,sRun))
                
                if RV:
                    
                    [notIceTop,changedVariables] = parse_logs(outLog, logger)
                    
                    message = ""
                    subject = " Template change for Run%s"%sRun
                    messageBody = ""
                    
                    # only necessary for html emails
                    mimeVersion="1.0"
                    contentType="text/html"
                    
                    messageBody += """
                                *** This is an automated message generated by the *** <br>
                                ***        GCD Template Checking System   *** <br><br>
                  
                                The Template Check for<br>
                                Run:<b>%s</b><br>
                                returned a non-zero value: <b>%s</b> <br>
                                The files compared are: <br><br>
                                currentFile: %s <br>
                                templateFile: %s <br><br>
                                <b>Non-IceTop DOMs affected</b>: [%s] <br><br>
                                <b>Union of affected values</b>: [%s]
                                """%(sRun,RV,currentFile,templateFile,notIceTop,changedVariables)
    
                    message = SN.CreateMsg(DOMAIN, SENDER, RECEIVERS, subject,messageBody,mimeVersion,contentType)
    
                    if len(message) and not dryrun:
                        SN.SendMsg(sender,receivers,message)
    
                
            except Exception, err:
                oL.write("\ncompare error for run %s"%sRun)
                oL.write(str(err))
        
        #clean up 
        os.system("rm *%s*"%sRun)
        os.system("rm *%s*"%sRuns[sRuns.index(sRun)-1])

if __name__ == '__main__':
    argparser = get_defaultparser(__doc__, dryrun = True)
    argparser.add_argument('-s', '--startrun', type = int, default = DEFAULT_START_RUN,
                        dest = "STARTRUN",
                        help = "Start run check from this run")

    args = argparser.parse_args()

    logger = get_logger(args.loglevel, LOGFILE)
    
    logger.info("Attempting TemplateGCDChecks @ %s"%datetime.datetime.now().isoformat().replace("T"," "))

    lock = libs.process.Lock(os.path.basename(__file__), logger)
    lock.lock()
    
    StartRun = args.STARTRUN

    notChecked = dbs4_.fetchall(""" SELECT * FROM i3filter.grl_snapshot_info g where (GCDCheck and BadDOMsCheck)
                               and run_id>=%s order by run_id"""%StartRun,UseDict=True)

    fileDict = {}
    for n in notChecked:
        currentFile = glob.glob("/data/exp/IceCube/%s/filtered/level2/AllGCD/*%s*"%(n['good_tstart'].year,n['run_id']))
    
        if len(currentFile):
            if os.path.isfile(currentFile[0]):
                fileDict[n['run_id']] = [currentFile[0],n['TemplateGCDCheck']]
    
    if not len(fileDict):
        logger.info("No GCD file meet criteria for Template testing .... exiting")
        exit(0)
        
    sRuns = fileDict.keys()
    sRuns.sort()

    logger.info("Check the following runs: %s"%sRuns)

    main_cmp(fileDict, sRuns, args.dryrun)
    
    lock.unlock()
