[DEFAULT]
; Additional defaults are (defined in libs/config.py by using libs/files.py):
;   tmpdir = temporary directory
;   rootdir = root directory of the offline processing scripts
;   logdir = base directory for log files

; Seasons
; Current season
Season = 2017

; Meta data file
MetaFileTemplateMainProcessing = %(rootdir)s/config/meta_template.xml

; ########################################
; ##### PERSONNEL ########################
; ########################################
[PERSONNEL]
; Personnel information is required for meta data
FirstName = Jan
LastName = Oertlin
eMail = jan.oertlin@icecube.wisc.edu

; ########################################
; ##### GCDGeneration ####################
; ########################################
[GCDGeneration]
; SPE correction not needed if used with gcdserver
SpeCorrectionFile = ${Level2:I3_SRC}/filterscripts/resources/data/final-spe-fits-pole-run2016_MAY.json.bz2

TmpCondorSubmitFile = %(tmpdir)s/submit_GCD.condor
CondorLog = ${Level2:OutputBasePath}/OfflinePreChecks/run_logs/condor_logs/{month:0>2}{day:0>2}/Run{run_id:0>8}_{production_version}_{snapshot_id}.log
CondorErrorLog = ${Level2:OutputBasePath}/OfflinePreChecks/run_logs/condor_err/{month:0>2}{day:0>2}/Run{run_id:0>8}_{production_version}_{snapshot_id}.err
OutLog = ${Level2:OutputBasePath}/OfflinePreChecks/run_logs/logs/{month:0>2}{day:0>2}/Run{run_id:0>8}_{production_version}_{snapshot_id}.out

I3LiveHost = live.icecube.wisc.edu
MongoDBHost = mongodb-live

; Current RC doesn't have the GCDDiff exit code fix
; GCDCompareTool = ${Level2:I3_SRC}/gcdserver/resources/GCDDiff.py

; Temporary solution?!
GCDCompareTool = /home/joertlin/workspace/gcdserver/trunk/resources/GCDDiff.py

; ########################################
; ##### GCD ##############################
; ########################################
[GCD]
BadDomListName = BadDomsList
BadDomListNameSLC = BadDomsListSLC

; Note that the SPS GCD files do NOT have leading zeros for the run id!
SPSGCDFile = /data/exp/IceCube/{year}/internal-system/sps-gcd/{month:0>2}{day:0>2}/PFGCD_Run{run_id:0>8}_Subrun00000000.flat.tar

; If the GCD files should be generated on the local machine (not using condor) the commands will be written into this file
LocalExecutionBashFile = %(tmpdir)s/generate_gcds.sh
LocalExecutionLogFile = %(tmpdir)s/generate_gcds_{run_id}_{snapshot_id}_{production_version}.out

; !!! THE FOLLOWING CONFIGURATIONS OVERRIDE THE CONFIGURATIONS FROM THE DATABASE !!!
; !!! FOR ALL SEASONS !!!
; ONLY UNCOMMENT THOSE CONFIGURATIONS IF YOU KNOW WHAT YOUR DOING, E.G. IF YOU NEED TO TEST
; SOMETHING AND WANT TO WRITE THE DATA TO A DIFFERENT PLACE
; HOWEVER, FOR PRODUCTION ALWAYS USE THE DATA FROM THE DATABASE. IT CONTAINS ALL INFORMATION
; FOR ALL SEASONS YOU SHOULD NEED. THE DATABASE ALSO IS A NICE SOURCE FOR HISTORICAL INFORMATION.

; GCD = ${Level2:OutputBasePath}/OfflinePreChecks/DataFiles/{month:0>2}{day:0>2}/Level2_IC86.{season}_data_Run{run_id:0>8}_{production_version}_{snapshot_id}_GCD.i3.zst

; ########################################
; ##### GCD Pass2 ########################
; ########################################
[GCDPass2]
BadDomListName = BadDomsList
BadDomListNameSLC = BadDomsListSLC

; !!! THE FOLLOWING CONFIGURATIONS OVERRIDE THE CONFIGURATIONS FROM THE DATABASE !!!
; !!! FOR ALL SEASONS !!!
; ONLY UNCOMMENT THOSE CONFIGURATIONS IF YOU KNOW WHAT YOUR DOING, E.G. IF YOU NEED TO TEST
; SOMETHING AND WANT TO WRITE THE DATA TO A DIFFERENT PLACE
; HOWEVER, FOR PRODUCTION ALWAYS USE THE DATA FROM THE DATABASE. IT CONTAINS ALL INFORMATION
; FOR ALL SEASONS YOU SHOULD NEED. THE DATABASE ALSO IS A NICE SOURCE FOR HISTORICAL INFORMATION.

; GCD = ${Level2pass2:OutputBasePath}/OfflinePreChecks/DataFiles/{month:0>2}{day:0>2}/Level2_IC86.{season}_data_Run{run_id:0>8}_{production_version}_{snapshot_id}_GCD.i3.zst

; ########################################
; ##### PFDST ############################
; ########################################
[PFDST]

PFDSTFile = /data/exp/IceCube/{year}/unbiased/PFDST/{month:0>2}{day:0>2}/PFDST_PhysicsFiltering_Run{run_id:0>8}_Subrun00000000_{sub_run_id:0>8}.tar.gz

; ########################################
; ##### PFFilt ###########################
; ########################################
[PFFilt]

PFFiltFile = /data/exp/IceCube/{year}/filtered/PFFilt/{month:0>2}{day:0>2}/PFFilt_PhysicsFiltering_Run{run_id:0>8}_Subrun00000000_{sub_run_id:0>8}.tar.bz2

; ########################################
; ##### L2 ###############################
; ########################################
[Level2]
; The src and build directory that should be used
I3_BUILD = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-01-04
I3_SRC = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-01-04

; Paths
; You can use {year}, {season}, {day}, {month}, {production_version}, {run_id}, {snapshot_id}, {now} (datetime), {sub_run_id}, {detector_configuration}, {ic86_season}
; if available for those paths.

; This is just a helper variable. It is not used by the scripts!
; HOWEVER, this variable is also used in the GCD section and is very helpful.
; This variable does NOT ned to be modified for PRODUCTION! Only if you perform some tests it
; is convenient to just change this variable AND uncomment the configs in Level2 and GCD section.
OutputBasePath = /data/exp/IceCube/{year}/filtered/level2

; Good run list (GRL) options. After each post processing, a new GRL will be created and if new entries were added, the file will be kept.
; Any version of the GRL will be kept in the `GRLFolder`. The file name is `GRLFileName`. Since there is always a 'GRL' and a 'Versioned GRL'
; ('Versioned GRL' means, that the `RUN_FOLDER` path is used instead of `RUN_FOLDER_LINK`) you need to specify both file names.
GRLFolder = ${Level2:OutputBasePath}/RunInfo
GRLFileName = ${Level2:GRLFolder}/IC86_{season}_GoodRunInfo_{production_version}_{now:%%Y_%%m_%%d-%%H_%%M_%%S}.txt
GRLFileVersionedName = ${Level2:GRLFolder}/IC86_{season}_GoodRunInfo_{production_version}_Versioned_{now:%%Y_%%m_%%d-%%H_%%M_%%S}.txt

; The latest GRL has a sym link in the level2 base folder. Those options specify the link names
GRLLinkName = ${Level2:OutputBasePath}/IC86_{season}_GoodRunInfo.txt
GRLLinkVersionedName = ${Level2:OutputBasePath}/IC86_{season}_GoodRunInfo_Versioned.txt

; For the following options exists the magic variable {RUN_FOLDER}. The value for {RUN_FOLDER} comes
; from the database that holds such information for each season.

; All gaps files will be tar-ed and then removed. Only the tar-ed version will be kept. This option specifies
; the name of the tar-ed version
GapsTarFile = {RUN_FOLDER}/Run{run_id:0>8}_GapsTxt.tar

; A couple of log files are written to the datawarehouse. They will also be tar-ed and removed. Only the tar-ed
; version will be kept. This option specifies the tar file name.
TarLogFileName = {RUN_FOLDER}/logfiles.tar.bz2

; Here you can specify as many glob strings as you want to find all log files. Note that you
; also can still use {year}, {run_id} etc. but NOT {sub_run_id}
; Be careful not to make a glob that includes data files!
; Note that the variable name MUST start with `LogFileGlob` followed by a number!
LogFileGlob1 = {RUN_FOLDER}/*.logerr
LogFileGlob2 = {RUN_FOLDER}/*.logicetray
LogFileGlob3 = {RUN_FOLDER}/*.logout

; Meta data file
; NOTE: This is the only "path" that is NOT!!!! NOT an absolute path. It is just the file name.
MetaFileName = level2_meta.xml

; Allow L2 post processing with crons
CronPostProcessing = On

; !!! THE FOLLOWING CONFIGURATIONS OVERRIDE THE CONFIGURATIONS FROM THE DATABASE !!!
; !!! FOR ALL SEASONS !!!
; ONLY UNCOMMENT THOSE CONFIGURATIONS IF YOU KNOW WHAT YOUR DOING, E.G. IF YOU NEED TO TEST
; SOMETHING AND WANT TO WRITE THE DATA TO A DIFFERENT PLACE
; HOWEVER, FOR PRODUCTION ALWAYS USE THE DATA FROM THE DATABASE. IT CONTAINS ALL INFORMATION
; FOR ALL SEASONS YOU SHOULD NEED. THE DATABASE ALSO IS A NICE SOURCE FOR HISTORICAL INFORMATION.

; The path where all the level2 files should be stored
; RUN_FOLDER = ${Level2:OutputBasePath}/{month:0>2}{day:0>2}/Run{run_id:0>8}_{production_version}

; Name of the GCD file in the run folder. MUST be a absolute path
; RUN_FOLDER_GCD = ${Level2:RUN_FOLDER}/Level2_IC86.{season}_data_Run{run_id:0>8}_{month:0>2}{day:0>2}_{production_version}_{snapshot_id}_GCD.i3.zst

; After the run has been validated, a sym link to the folder will be created that has no prodiction version information.
; For instance, it could point to `Run00123456 -> Run00123456_99`.
; RUN_FOLDER_LINK = ${Level2:OutputBasePath}/{month:0>2}{day:0>2}/Run{run_id:0>8}

; If a sub run is entirely or partly not within the good start/stop time range, the file will be moved to a (sub)folder to
; make sure that those files are not accidently used. This option specifies the folder for those subr runs
; BAD_FILE_FOLDER = ${Level2:RUN_FOLDER}/Bad_NotWithinGoodRunRange

; The actual file names. Note that this MUST always be absolute paths!
; Also note, that those filenames must match the config in iceprod!
; DATA = ${Level2:RUN_FOLDER}/Level2_IC86.{season}_data_Run{run_id:0>8}_Subrun00000000_{sub_run_id:0>8}.i3.zst
; ICE_TOP = ${Level2:RUN_FOLDER}/Level2_IC86.{season}_data_Run{run_id:0>8}_Subrun00000000_{sub_run_id:0>8}_IT.i3.zst
; GAPS = ${Level2:RUN_FOLDER}/Level2_IC86.{season}_data_Run{run_id:0>8}_Subrun00000000_{sub_run_id:0>8}_gaps.txt
; EHE = ${Level2:RUN_FOLDER}/Level2_IC86.{season}_data_Run{run_id:0>8}_Subrun00000000_{sub_run_id:0>8}_EHE.i3.zst
; SLOP = ${Level2:RUN_FOLDER}/Level2_IC86.{season}_data_Run{run_id:0>8}_Subrun00000000_{sub_run_id:0>8}_SLOP.i3.zst

; ########################################
; ##### L2 Pass2 #########################
; ########################################
[Level2pass2]

; Paths
; This is just a helper variable. It is not used by the scripts!
OutputBasePath = /data/exp/IceCube/{year}/filtered/Level2pass2

GRLFolder = ${Level2pass2:OutputBasePath}/RunInfo
GRLFileName = ${Level2pass2:GRLFolder}/IC86_{season}_GoodRunInfo_{production_version}_{now:%%Y_%%m_%%d-%%H_%%M_%%S}.txt
GRLFileVersionedName = ${Level2pass2:GRLFolder}/IC86_{season}_GoodRunInfo_{production_version}_Versioned_{now:%%Y_%%m_%%d-%%H_%%M_%%S}.txt
GRLLinkName = ${Level2pass2:OutputBasePath}/IC86_{season}_GoodRunInfo.txt
GRLLinkVersionedName = ${Level2pass2:OutputBasePath}/IC86_{season}_GoodRunInfo_Versioned.txt

; !!! SEE COMMENT IN LEVEL2 SECTION !!!
; !!! DO ONLY UNCOMMENT IF YOU KNOW WHAT YOU DO !!!

; RUN_FOLDER = ${Level2pass2:OutputBasePath}/{month:0>2}{day:0>2}/Run{run_id:0>8}_{production_version}
; RUN_FOLDER_GCD = ${Level2pass2:RUN_FOLDER}/Level2_IC86.{season}_data_Run{run_id:0>8}_{month:0>2}{day:0>2}_{production_version}_{snapshot_id}_GCD.i3.zst
; RUN_FOLDER_LINK = ${Level2pass2:OutputBasePath}/{month:0>2}{day:0>2}/Run{run_id:0>8}

; DATA = ${Level2pass2:RunLinkName}/Level2_IC86.{season}_data_Run{run_id:0>8}_Subrun{sub_run_id:0>8}.i3.bz2
; GAPS = ${Level2pass2:RunLinkName}/Level2_IC86.{season}_data_Run{run_id:0>8}_Subrun{sub_run_id:0>8}_gaps.txt

; ########################################
; ##### L3 ###############################
; ########################################
[Level3]
; The src and build directory that should be used for each dataset
; Note that the keys MUST follow the pattern 'I3_SRC_YYYY' and "I3_BUILD_YYYY' whereby YYYY the dataset id is
I3_SRC_1885 = /data/user/i3filter/IC86_OfflineProcessing/icerec/IC2015-L3_Muon_V5
I3_BUILD_1885 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_IC2015-L3_Muon_V5

I3_SRC_1889 = /data/user/i3filter/IC86_OfflineProcessing/icerec/IC2015-L3_Muon_V5
I3_BUILD_1889 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_IC2015-L3_Muon_V5

I3_SRC_1890 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-00-01
I3_BUILD_1890 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-00-01

I3_SRC_1891 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-00-01
I3_BUILD_1891 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-00-01

I3_SRC_1892 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-00-01
I3_BUILD_1892 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-00-01

I3_SRC_1893 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-00-04
I3_BUILD_1893 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-00-04

I3_SRC_1894 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-00-02
I3_BUILD_1894 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-00-02

I3_SRC_1895 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-00-02
I3_BUILD_1895 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-00-02

I3_SRC_1896 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-00-02
I3_BUILD_1896 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-00-02

I3_SRC_1898 = /data/user/i3filter/IC86_OfflineProcessing/icerec/IC2015-L3_Muon_V5
I3_BUILD_1898 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_IC2015-L3_Muon_V5

I3_SRC_1901 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-01-00-RC5_CR_Test
I3_BUILD_1901 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-01-00-RC5_CR_Test

I3_SRC_1902 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-01-00-RC5_CR_Test
I3_BUILD_1902 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-01-00-RC5_CR_Test

I3_SRC_1905 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-01-00-RC5_CR_Test
I3_BUILD_1905 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-01-00-RC5_CR_Test

I3_SRC_1906 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-01-00-RC5_CR_Test
I3_BUILD_1906 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-01-00-RC5_CR_Test

I3_SRC_1908 = /data/user/i3filter/IC86_OfflineProcessing/icerec/V05-01-00-RC5_CR_Test
I3_BUILD_1908 = /data/user/i3filter/IC86_OfflineProcessing/icerec/RHEL_6.4_V05-01-00-RC5_CR_Test

; Cosmic Ray WG Special GCDs
CosmicRayGCD = /data/ana/CosmicRay/IceTop_level3/exp/{detector_configuration}.{season}/production/GCD/Level3_{detector_configuration}.{season}_data_Run{run_id:0>8}_{month:0>2}{day:0>2}_GCD.i3.gz

; Cosmic Ray WG MC GCD files
CosmicRayMCGCD_2010 = /data/sim/sim-new/downloads/GCD/GeoCalibDetectorStatus_IC79.55380_L2a.i3.gz
CosmicRayMCGCD_2011 = /data/sim/sim-new/downloads/GCD/GeoCalibDetectorStatus_IC86.55697_corrected_V3_NovSnow.i3.gz
CosmicRayMCGCD_2012 = /data/sim/sim-new/downloads/GCD/GeoCalibDetectorStatus_2012.56063_V1_OctSnow.i3.gz
CosmicRayMCGCD_2013 = /data/sim/sim-new/downloads/GCD/GeoCalibDetectorStatus_2013.56429_V1_OctSnow.i3.gz
CosmicRayMCGCD_2014 = /data/sim/sim-new/downloads/GCD/GeoCalibDetectorStatus_2014.56784_V0_NovSnow.i3.gz
CosmicRayMCGCD_2015 = /data/sim/sim-new/downloads/GCD/GeoCalibDetectorStatus_2015.57161_V0_OctSnow.i3.gz
CosmicRayMCGCD_2016 = /data/sim/sim-new/downloads/GCD/GeoCalibDetectorStatus_2016.57531_V0_OctSnow.i3.gz

; Meta data file
MetaFileName = level3_meta.xml

; Managing crons
CronMainSubmission = On
CronPostProcessing = On

; ########################################
; ##### PoleGCDChecks ####################
; ########################################
[PoleGCDChecks]
; Log file for a specific run
RunLogFile = %(logdir)s/PoleGCDChecks/Run{run_id:0>8}.log

; Receivers for notifications: The key must start with 'NotificationReceiver' followed by an unique number
NotificationReceiver1 = drwilliams3@ua.edu
NotificationReceiver2 = john.kelley@icecube.wisc.edu
NotificationReceiver3 = matt.kauer@icecube.wisc.edu
NotificationReceiver4 = tomas.j.palczewski@ua.edu
NotificationReceiver6 = jan.oertlin@icecube.wisc.edu

; ########################################
; ##### TemplateGCDChecks ################
; ########################################
[TemplateGCDChecks]
; Log file for a specific run
RunLogFile = %(logdir)s/TemplateGCDChecks/Run{run_id:0>8}.log

; Receivers for notifications: The key must start with 'NotificationReceiver' followed by an unique number
NotificationReceiver1 = drwilliams3@ua.edu
NotificationReceiver2 = john.kelley@icecube.wisc.edu
NotificationReceiver3 = matt.kauer@icecube.wisc.edu
NotificationReceiver4 = tomas.j.palczewski@ua.edu
NotificationReceiver5 = jan.oertlin@icecube.wisc.edu

; ########################################
; ##### CacheCheckSums ###################
; ########################################
[CacheCheckSums]
; The absolute path of the cache file
CacheFile = %(tmpdir)s/checksum_cache.json

; How many *days* should the script look back?
LookBack = 5

; How old must be the file before it will be indexed?
; This should be at least a few minutes to avoid MD5 check sums of an incompleted file
; Unit is seconds
HoldOffInterval = 300

; Paths that should be checked: You can use {year}, {month}, {day} but {run_id}, {sub_run_id}, {production_version}, and {snapshot_id} will be replaced by *
; Note: You can add several paths but the variable needs to start with `Path` followed by a number
Path1 = ${PFFilt:PFFiltFile}
; Path2 = ${PFDST:PFDSTFile}

; ########################################
; ##### GetRunInfo #######################
; ########################################
[GetRunInfo]
; There is a cron that checks once a day if a new snapshot is available.
; If a new snapshot is available, the following receivers will get a email notification
; The key must start with 'NotificationReceiver' followed by an unique number
NotificationReceiver1 = jan.oertlin@icecube.wisc.edu

; ########################################
; ##### Notifications ####################
; ########################################
[Notifications]
eMailSender = jan.oertlin
eMailDomain = @icecube.wisc.edu
eMailMimeVersion = 1.0
eMailContentType = text/html

; ########################################
; ##### Logger ###########################
; ########################################
[Logger]
; Using python logger
;Format = [%%(asctime)s] %%(levelname)s: %%(module)s(%%(lineno)d):   %%(message)s


